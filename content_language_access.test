<?php

/**
 * @file
 *
 */
class ContentLanguageAccessTestCase extends DrupalWebTestCase {

  /**
   * Implementation of getInfo().
   */
  function getInfo() {
    return array(
      'name' => t('Content Language Access'),
      'description' => t('Test the features of content_language_access module.'),
      'group' => t('Content Language Access'),
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    //parent::setUp('locale', 'node');

    $this->admin_user = $this->drupalCreateUser(array(
      'administer languages',
      'administer site configuration',
      'access administration pages',
      'administer content types',
      'administer nodes',
      'administer users',
    ));
    $this->visitor = $this->drupalCreateUser(array('access content'));

    $this->configureLanguages();

    $this->createContentType();
    $this->createContents();
  }

  function configureLanguages() {
    $this->drupalLogin($this->admin_user);

    $this->addLanguage('fr');
    $this->addLanguage('pt-br');
    // Set path languages so we can retrieve pages in different languages
    variable_set('language_negotiation', LANGUAGE_NEGOTIATION_PATH);
  }

  function createContentType() {
    $settings = array();
    $settings['language_content_type'] = 2;
    $this->content_type = $this->drupalCreateContentType($settings);
  }

  function createContents() {
    $this->drupalLogin($this->admin_user);

    $languages = $this->getLanguageList();

    foreach ($languages as $language_key => $language) {
      $settings = array();
      $settings['title'] = 'Test ' + $language->name;
      $settings['language'] = $language_key;

      $this->nodes[$language_key] = $this->drupalCreateNode($settings);
    }
  }

  function getLanguageList($neutral_language = TRUE) {
    $languages = language_list();

    if ($neutral_language) {
      $languages[''] = (object) array(
        'prefix' => '',
        'language' => '',
        'name' => 'Language Neutral',
      );
    }

    return $languages;
  }

  /**
   * Enable the specified language if it has not been already.
   *
   * @param string $language_code
   *   The language code to enable.
   */
  function addLanguage($language_code) {
    // Check to make sure that language has not already been installed.
    $this->drupalGet('admin/settings/language');

    if (strpos($this->drupalGetContent(), 'enabled[' . $language_code . ']') === FALSE) {
      // Doesn't have language installed so add it.
      $edit = array();
      $edit['langcode'] = $language_code;
      $this->drupalPost('admin/settings/language/add', $edit, t('Add language'));

      $languages = language_list('language', TRUE); // Make sure not using cached version.
      $this->assertTrue(array_key_exists($language_code, $languages), t('Language was installed successfully.'));

      if (array_key_exists($language_code, $languages)) {
        $this->assertRaw(t('The language %language has been created and can now be used.', array('%language' => $languages[$language_code]->name)), t('Language has been created.'));
      }
    }
    else {
      // Ensure that it is enabled.
      $this->drupalPost(NULL, array('enabled[' . $language_code . ']' => TRUE), t('Save configuration'));

      $this->assertRaw(t('Configuration saved.'), t('Language successfully enabled.'));
    }
  }

  function testContentLanguageAccess() {
    $this->drupalLogin($this->visitor);

    $languages = $this->getLanguageList(FALSE);
    foreach ($this->nodes as $node) {
      foreach ($languages as $language) {
        if ($language->prefix) {
          $prefix = $language->prefix . '/';
        }
        else {
          $prefix = '';
        }

        $this->drupalGet($prefix . 'node/' . $node->nid);

        if ($node->language == '' || $node->language == $language->language) {
          $this->assertResponse(200);
        }
        else {
          $this->assertResponse(403);
        }
      }
    }
  }

}
